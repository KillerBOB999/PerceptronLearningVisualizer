<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Qv9QbUf/XoJT/2GMV/9ikVf/ZJJY/3CjYf9Sdk//U3ZS/2aNYv9ukmr/XYFa/1uAWP9zpGz/Yo5Z/2GQ
        WP9qnF//YIxW/01qRv9BYUD/Kjsn/xIbDv8FCwX/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/BwoF/xkk
        E/8uPin/M0Qs/01qQP9TdUb/W35O/2CFUv9ghlL/aZNb/0FZP/8xPSv/P042/z5MNf83RC7/UGtJ/3Wm
        bf9bhFP/WYBO/2iXXP9fjFT/T2tH/zVJM/8iMB//EBkM/wYKBP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8DBQL/FB0P/yUyH/8rOiT/O1Mz/0hkPf9Sc0X/V3tM/1d6TP9jh1j/SmdG/z9TOf9JYED/SF9A/0Zc
        Pf9Sb0z/aJhg/26cY/9bgk3/ZI5W/1mATP9PaUT/LTwn/xolE/8PFwr/BgkE/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wIDAv8RGAr/HigZ/yQwHv8uQyf/N08w/0RgO/9KZkD/TmhF/1hyTv9Qbkr/SWlD/0lp
        Q/9JaUT/SWlE/1V0Tf9giVT/Y45U/2OMUv9chE//UHNE/0BYNf8jLh//ExwQ/w8XCv8FBQP/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AgEB/xAXC/8VHxH/HCUV/yU1Hf8sQCX/OUww/z1QNf9CVDn/SFs//0Vc
        P/9DYj3/Q2I9/0RjPv9DYj3/T21G/1p7S/9agUz/V35K/1FzRP9EYTr/NEcu/x0lGv8NFAn/ExgM/wIC
        Av8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/ERIO/xgfEv8UHA//HScW/yQwG/8pOSD/MT4o/zVB
        LP88SDP/O082/z5ZN/89Wjf/P1w5/z1ZN/9EWTr/TWU//1FwRP9KaD3/Plcz/zRILv8mMCD/EhYQ/xcb
        EP8WFxL/AAAA/wABAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8FAwT/EhYO/w8YDP8WIA//GiUS/xwn
        FP8fKhf/JzEe/yw2JP8wPir/Ok0x/zpPM/84UDL/NEsu/zM/KP8/TzT/PlM1/zRIK/8tPSb/JC4c/xcd
        Ev8QEg7/FxkU/wQEBP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8EBgT/DRUL/xAZ
        Cv8THQz/FR8Q/xcgEP8eJhf/HyUZ/yEqHP8uOiT/Lz0n/zA+Kf8rOCP/Ji0d/y86J/8rNyT/JC8d/x0n
        Fv8VGxD/EBUM/xATDv8EBAP/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wIC
        Af8MEAj/DRMI/w8WCf8QGQz/EhkK/xMaDP8UGg7/GSAT/yEqG/8kLR7/Iy0d/yApGv8eJBj/HyYX/xwj
        FP8YHxL/FBsO/w8VCv8OFAv/Cg0I/wEBAf8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wQEAv8PEwr/DBII/wsRB/8NFAf/DxUJ/xEWDP8OEQr/DBIM/w4VDP8QFg3/DRUL/xEW
        Dv8VHBD/ExoN/xAVC/8MEQr/DxMM/wkKCP8AAQD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wcHBf8SFA3/ERYN/woQB/8DCQH/CQ4I/z5BLP8yNh//PD8x/zo+
        LP8wNR//MzYn/wcNB/8HDAb/DREL/xUZEf8MDAn/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wcFBP8fHBP/ODYl/z08KP9BQSz/lJdL/83O
        ZP/+/N7/8O63/7S2VP93eEj/Kysg/zg3JP8uLB7/ExIM/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8BAQH/BAQE/xMPCf8yKxj/V04s/3h0
        QP+Vmj//ztBd//r72v/v76//tbZK/4iLRv9wbD//TUMm/yQeEP8LCAb/AQEB/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>